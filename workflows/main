import os.path
import sys
from pathlib import Path
import joblib

sys.path.append('/src')
from src.example_package_anw.example import *
from src.example_package_anw.ml_eval import *
from src.example_package_anw.keras import *

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC

# Parameter Dictionaries

rf_params = {'criterion': 'entropy',
             'max_depth': 15,
             'n_estimators': 22984,
             'min_samples_leaf': 3,
             'min_samples_split': 9,
             'max_leaf_nodes': 239,
             'random_state': 22}

dt_params = {'criterion': 'entropy',
             'max_depth': 35,
             'min_samples_leaf': 4,
             'min_samples_split': 23,
             'max_leaf_nodes': 169}

svc_params = {'kernel': 'poly',
              'degree': 3,
              'coef0': 1,
              'C': 5}

lr_params = {'multi_class': 'ovr',
             'class_weight': None,
             'solver': 'saga',
             'max_iter': 10000}
# Models and Labels Dictionaries
models = {'dt': DecisionTreeClassifier(**dt_params),
          'rf': RandomForestClassifier(**rf_params),
          'svc': SVC(**svc_params),
          'lr': LogisticRegression(**lr_params)}


def main():
    dat = source_date(path)
    X_train, y_train, X_test, y_test = train_test_dat(dat)
    X_train_reduced, X_test_reduced, train_components, test_components = pca_date(X_train, X_test)
    y_pred_final, log_reg = ml_model(X_train_reduced, X_test_reduced, y_train, y_test,
                                     train_components)
    #    roc(log_reg, X_train_reduced, y_train) # ROC
    #    cor(X_train_reduced) # Check the correlations between components

    # save the model to disk
    if not os.path.isfile(ml_path):
        joblib.dump(log_reg, ml_path)

    # Evaluation of ML
    Eval = model()
    Eval.X_train = X_train_reduced
    Eval.X_test = X_test_reduced
    Eval.y_train = y_train
    Eval.y_test = y_test
    Eval.models = models
    for key in models.keys():
        Eval.clf = key
        Eval.model_ev()
        print('Final', Eval.res_ev)

    # CNN
    x_traincnn = np.expand_dims(X_train, axis=(2))
    x_testcnn = np.expand_dims(X_test, axis=(2))
    model_keras = model_cnn(x_traincnn, x_testcnn,y_train,y_test )
    model_keras.cnn()
    # save the model to disk
    if not os.path.isfile(dl_path):
        model_keras.model_cnn.save(dl_path)
        print('Saved trained model at %s ' % dl_path)

if __name__ == '__main__':
    path_dir = str(Path(__file__).resolve().parent.parent)
    path = path_dir + '\date\caravan-insurance-challenge.csv'
    path_model = os.path.join(path_dir, 'tests\models')
    ml_file_name = 'ml_model.sav'
    dl_file_name = 'cnn_model.h5'
    ml_path = os.path.join(path_model, ml_file_name)
    dl_path = os.path.join(path_model, dl_file_name)
    if not os.path.isdir(path_model):
        os.makedirs(path_model)
    main()
